// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sniffer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sniffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SnifferQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnifferQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnifferResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnifferResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnifferResponse_RSSIRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnifferResponse_RSSIRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SnifferStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sniffer_2eproto() {
  protobuf_AddDesc_sniffer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sniffer.proto");
  GOOGLE_CHECK(file != NULL);
  SnifferQuery_descriptor_ = file->message_type(0);
  static const int SnifferQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferQuery, record_id_),
  };
  SnifferQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnifferQuery_descriptor_,
      SnifferQuery::default_instance_,
      SnifferQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnifferQuery));
  SnifferResponse_descriptor_ = file->message_type(1);
  static const int SnifferResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse, interrupted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse, rssi_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse, status_),
  };
  SnifferResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnifferResponse_descriptor_,
      SnifferResponse::default_instance_,
      SnifferResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnifferResponse));
  SnifferResponse_RSSIRecord_descriptor_ = SnifferResponse_descriptor_->nested_type(0);
  static const int SnifferResponse_RSSIRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse_RSSIRecord, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse_RSSIRecord, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse_RSSIRecord, id_),
  };
  SnifferResponse_RSSIRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnifferResponse_RSSIRecord_descriptor_,
      SnifferResponse_RSSIRecord::default_instance_,
      SnifferResponse_RSSIRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse_RSSIRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnifferResponse_RSSIRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnifferResponse_RSSIRecord));
  QueryType_descriptor_ = file->enum_type(0);
  ResponseType_descriptor_ = file->enum_type(1);
  SnifferStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sniffer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnifferQuery_descriptor_, &SnifferQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnifferResponse_descriptor_, &SnifferResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnifferResponse_RSSIRecord_descriptor_, &SnifferResponse_RSSIRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sniffer_2eproto() {
  delete SnifferQuery::default_instance_;
  delete SnifferQuery_reflection_;
  delete SnifferResponse::default_instance_;
  delete SnifferResponse_reflection_;
  delete SnifferResponse_RSSIRecord::default_instance_;
  delete SnifferResponse_RSSIRecord_reflection_;
}

void protobuf_AddDesc_sniffer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsniffer.proto\"I\n\014SnifferQuery\022&\n\004type\030"
    "\001 \002(\0162\n.QueryType:\014DATA_REQUEST\022\021\n\trecor"
    "d_id\030\002 \001(\005\"\316\001\n\017SnifferResponse\022!\n\004type\030\001"
    " \002(\0162\r.ResponseType:\004DATA\022\023\n\013interrupted"
    "\030\002 \001(\010\022.\n\trssi_data\030\003 \003(\0132\033.SnifferRespo"
    "nse.RSSIRecord\022\036\n\006status\030\004 \001(\0162\016.Sniffer"
    "Status\0323\n\nRSSIRecord\022\013\n\003mac\030\001 \001(\014\022\014\n\004rss"
    "i\030\002 \001(\005\022\n\n\002id\030\003 \001(\005*1\n\tQueryType\022\022\n\016STAT"
    "US_REQUEST\020\000\022\020\n\014DATA_REQUEST\020\001*$\n\014Respon"
    "seType\022\010\n\004DATA\020\000\022\n\n\006STATUS\020\001*6\n\rSnifferS"
    "tatus\022\023\n\017SNIFFING_STOPED\020\000\022\020\n\014SNIFFING_R"
    "UN\020\001B\030\n\014sniffer_protB\010prot_buf", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sniffer.proto", &protobuf_RegisterTypes);
  SnifferQuery::default_instance_ = new SnifferQuery();
  SnifferResponse::default_instance_ = new SnifferResponse();
  SnifferResponse_RSSIRecord::default_instance_ = new SnifferResponse_RSSIRecord();
  SnifferQuery::default_instance_->InitAsDefaultInstance();
  SnifferResponse::default_instance_->InitAsDefaultInstance();
  SnifferResponse_RSSIRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sniffer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sniffer_2eproto {
  StaticDescriptorInitializer_sniffer_2eproto() {
    protobuf_AddDesc_sniffer_2eproto();
  }
} static_descriptor_initializer_sniffer_2eproto_;
const ::google::protobuf::EnumDescriptor* QueryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryType_descriptor_;
}
bool QueryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseType_descriptor_;
}
bool ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SnifferStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnifferStatus_descriptor_;
}
bool SnifferStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SnifferQuery::kTypeFieldNumber;
const int SnifferQuery::kRecordIdFieldNumber;
#endif  // !_MSC_VER

SnifferQuery::SnifferQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnifferQuery::InitAsDefaultInstance() {
}

SnifferQuery::SnifferQuery(const SnifferQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnifferQuery::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  record_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnifferQuery::~SnifferQuery() {
  SharedDtor();
}

void SnifferQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnifferQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnifferQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnifferQuery_descriptor_;
}

const SnifferQuery& SnifferQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sniffer_2eproto();
  return *default_instance_;
}

SnifferQuery* SnifferQuery::default_instance_ = NULL;

SnifferQuery* SnifferQuery::New() const {
  return new SnifferQuery;
}

void SnifferQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    record_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnifferQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QueryType type = 1 [default = DATA_REQUEST];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QueryType_IsValid(value)) {
            set_type(static_cast< ::QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_record_id;
        break;
      }

      // optional int32 record_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnifferQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QueryType type = 1 [default = DATA_REQUEST];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 record_id = 2;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->record_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnifferQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QueryType type = 1 [default = DATA_REQUEST];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 record_id = 2;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->record_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnifferQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QueryType type = 1 [default = DATA_REQUEST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 record_id = 2;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnifferQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnifferQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnifferQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnifferQuery::MergeFrom(const SnifferQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnifferQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnifferQuery::CopyFrom(const SnifferQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnifferQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SnifferQuery::Swap(SnifferQuery* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(record_id_, other->record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnifferQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnifferQuery_descriptor_;
  metadata.reflection = SnifferQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnifferResponse_RSSIRecord::kMacFieldNumber;
const int SnifferResponse_RSSIRecord::kRssiFieldNumber;
const int SnifferResponse_RSSIRecord::kIdFieldNumber;
#endif  // !_MSC_VER

SnifferResponse_RSSIRecord::SnifferResponse_RSSIRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnifferResponse_RSSIRecord::InitAsDefaultInstance() {
}

SnifferResponse_RSSIRecord::SnifferResponse_RSSIRecord(const SnifferResponse_RSSIRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnifferResponse_RSSIRecord::SharedCtor() {
  _cached_size_ = 0;
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rssi_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnifferResponse_RSSIRecord::~SnifferResponse_RSSIRecord() {
  SharedDtor();
}

void SnifferResponse_RSSIRecord::SharedDtor() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void SnifferResponse_RSSIRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnifferResponse_RSSIRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnifferResponse_RSSIRecord_descriptor_;
}

const SnifferResponse_RSSIRecord& SnifferResponse_RSSIRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sniffer_2eproto();
  return *default_instance_;
}

SnifferResponse_RSSIRecord* SnifferResponse_RSSIRecord::default_instance_ = NULL;

SnifferResponse_RSSIRecord* SnifferResponse_RSSIRecord::New() const {
  return new SnifferResponse_RSSIRecord;
}

void SnifferResponse_RSSIRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    rssi_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnifferResponse_RSSIRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mac = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rssi;
        break;
      }

      // optional int32 rssi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnifferResponse_RSSIRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes mac = 1;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->mac(), output);
  }

  // optional int32 rssi = 2;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rssi(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnifferResponse_RSSIRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes mac = 1;
  if (has_mac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mac(), target);
  }

  // optional int32 rssi = 2;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rssi(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnifferResponse_RSSIRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mac = 1;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac());
    }

    // optional int32 rssi = 2;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnifferResponse_RSSIRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnifferResponse_RSSIRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnifferResponse_RSSIRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnifferResponse_RSSIRecord::MergeFrom(const SnifferResponse_RSSIRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnifferResponse_RSSIRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnifferResponse_RSSIRecord::CopyFrom(const SnifferResponse_RSSIRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnifferResponse_RSSIRecord::IsInitialized() const {

  return true;
}

void SnifferResponse_RSSIRecord::Swap(SnifferResponse_RSSIRecord* other) {
  if (other != this) {
    std::swap(mac_, other->mac_);
    std::swap(rssi_, other->rssi_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnifferResponse_RSSIRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnifferResponse_RSSIRecord_descriptor_;
  metadata.reflection = SnifferResponse_RSSIRecord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SnifferResponse::kTypeFieldNumber;
const int SnifferResponse::kInterruptedFieldNumber;
const int SnifferResponse::kRssiDataFieldNumber;
const int SnifferResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

SnifferResponse::SnifferResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnifferResponse::InitAsDefaultInstance() {
}

SnifferResponse::SnifferResponse(const SnifferResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnifferResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  interrupted_ = false;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnifferResponse::~SnifferResponse() {
  SharedDtor();
}

void SnifferResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnifferResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnifferResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnifferResponse_descriptor_;
}

const SnifferResponse& SnifferResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sniffer_2eproto();
  return *default_instance_;
}

SnifferResponse* SnifferResponse::default_instance_ = NULL;

SnifferResponse* SnifferResponse::New() const {
  return new SnifferResponse;
}

void SnifferResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    interrupted_ = false;
    status_ = 0;
  }
  rssi_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnifferResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ResponseType type = 1 [default = DATA];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ResponseType_IsValid(value)) {
            set_type(static_cast< ::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interrupted;
        break;
      }

      // optional bool interrupted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interrupted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interrupted_)));
          set_has_interrupted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rssi_data;
        break;
      }

      // repeated .SnifferResponse.RSSIRecord rssi_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rssi_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rssi_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rssi_data;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .SnifferStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SnifferStatus_IsValid(value)) {
            set_status(static_cast< ::SnifferStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnifferResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ResponseType type = 1 [default = DATA];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool interrupted = 2;
  if (has_interrupted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->interrupted(), output);
  }

  // repeated .SnifferResponse.RSSIRecord rssi_data = 3;
  for (int i = 0; i < this->rssi_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rssi_data(i), output);
  }

  // optional .SnifferStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnifferResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ResponseType type = 1 [default = DATA];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool interrupted = 2;
  if (has_interrupted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->interrupted(), target);
  }

  // repeated .SnifferResponse.RSSIRecord rssi_data = 3;
  for (int i = 0; i < this->rssi_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rssi_data(i), target);
  }

  // optional .SnifferStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnifferResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ResponseType type = 1 [default = DATA];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool interrupted = 2;
    if (has_interrupted()) {
      total_size += 1 + 1;
    }

    // optional .SnifferStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .SnifferResponse.RSSIRecord rssi_data = 3;
  total_size += 1 * this->rssi_data_size();
  for (int i = 0; i < this->rssi_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rssi_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnifferResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnifferResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnifferResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnifferResponse::MergeFrom(const SnifferResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rssi_data_.MergeFrom(from.rssi_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_interrupted()) {
      set_interrupted(from.interrupted());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnifferResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnifferResponse::CopyFrom(const SnifferResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnifferResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SnifferResponse::Swap(SnifferResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(interrupted_, other->interrupted_);
    rssi_data_.Swap(&other->rssi_data_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnifferResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnifferResponse_descriptor_;
  metadata.reflection = SnifferResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
